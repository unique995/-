例如有6张牌，最开始牌的序列是1,2,3,4,5,6。
首先分成两组，左手拿着1,2,3；右手拿着4,5,6。
在洗牌过程中按顺序放下了6,3,5,2,4,1。
把这六张牌再次合成一组牌之后，我们按照从上往下的顺序看这组牌，就变成了序列1,4,2,5,3,6。 
现在给出一个原始牌组，请输出这副牌洗牌k次之后从上往下的序列

输入描述: 
第一行一个数T(T ≤ 100)，表示数据组数。
对于每组数据，第一行两个数n,k(1 ≤ n,k ≤ 100)，接下来一行有2n个数a1,a2,…,a2n(1 ≤ ai ≤ 1000000000)。
表示原始牌组从上到下的序列。（n表示每个分组的元素个数；k表示洗牌次数）

输出描述: 
对于每组数据，输出一行，最终的序列。数字之间用空格隔开，不要在行末输出多余的空格。
输入例子: 
3

3 1

1 2 3 4 5 6

3 2

1 2 3 4 5 6

2 2

1 1 1 1

输出例子: 
1 4 2 5 3 6

1 5 4 3 2 6

1 1 1 1

import java.util.ArrayList;
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int i = 0; i < T; i ++) {
            int n = sc.nextInt();
            int k = sc.nextInt();
            int[] arr = new int[2 * n];
            for (int j = 0; j < 2 * n; j ++) {
                arr[j] = sc.nextInt();
            }
            for (int times = 0; times < k; times ++) {
                ShuffleOnce(arr, arr.length);
            }
            for (int a = 0; a < n * 2 - 1; a ++) {
                System.out.print(arr[a] + " ");
            }
            System.out.println(arr[n * 2 - 1]);
        }
    }

    private static void ShuffleOnce(int[] arr, int n) {
        ArrayList<Integer> list = new ArrayList<>(n);
        for (int i = 0; i < n / 2; i ++) {
            list.add(arr[i]);
            list.add(arr[i + n / 2]);
        }
        for (int i = 0; i < n; i ++) {
            arr[i] = list.get(i);
        }
    }
}
