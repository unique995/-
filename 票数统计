 题目描述
 请实现接口：
 unsigned int AddCandidate (char* pCandidateName);
 功能：设置候选人姓名
 输入： char* pCandidateName 候选人姓名
 输出：无
 返回：输入值非法返回0，已经添加过返回0 ，添加成功返回1

 Void Vote(char* pCandidateName);
 功能：投票
 输入： char* pCandidateName 候选人姓名
 输出：无
 返回：无

 unsigned int GetVoteResult (char* pCandidateName);
 功能：获取候选人的票数。如果传入为空指针，返回无效的票数，同时说明本次投票活动结束，释放资源
 输入： char* pCandidateName 候选人姓名。当输入一个空指针时，返回无效的票数
 输出：无
 返回：该候选人获取的票数

 void Clear()
 // 功能：清除投票结果，释放所有资源
 // 输入：
 // 输出：无
 // 返回

 输入描述:
 输入候选人的人数，第二行输入候选人的名字，第三行输入投票人的人数，第四行输入投票。
 输出描述:
 每行输出候选人的名字和得票数量。


import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
    static List<String> candidateList = new ArrayList<>();
    static List<Integer> voteList = new ArrayList<>();
    public static int AddCandidate(String pCandidateName){
        if(pCandidateName == " "){
            return 0;
        }
        if(!candidateList.contains(pCandidateName)){
            candidateList.add(pCandidateName);
            voteList.add(0);
            return 1;
        }else {
            return 0;
        }
    }
    public static void Vote(String pCandidateName){
        int index = 0;
        if(candidateList.contains(pCandidateName)){
            index = candidateList.indexOf(pCandidateName);
            voteList.set(index,voteList.get(index)+1);
        }
    }
    public static int GetVoteResult(String pCandadateName){
        int index = candidateList.indexOf(pCandadateName);
        return voteList.get(index);
    }
    public static void Clear(){
        candidateList.clear();
        voteList.clear();
    }
    public static void main(String[] args) {
        Scanner  scanner = new Scanner(System.in);
        while (scanner.hasNext()){
            int addResult = 0;
            String candidateNum = scanner.nextLine();//候选人人数
            String candidateName = scanner.nextLine();//候选人姓名
            String voteNum = scanner.nextLine();//投票人个数
            String voteName = scanner.nextLine();//投票人所投的人名
            String []candidates = candidateName.split(" ");//候选人数组
            String []votes = voteName.split(" ");//投票人所投人名数组
            int candidateNum1 = Integer.parseInt(candidateNum);//候选人个数
            int voteNum1 = Integer.parseInt(voteNum);//投票人个数
            for (int i = 0;i < candidates.length;i++){
                addResult = AddCandidate(candidates[i]);
            }
            //candidateList.add("Invalid");
            //voteList.add(0);
            for (int i = 0;i < votes.length;i++){
                Vote(votes[i]);
            }
            int nums = 0;
            for (int i = 0;i < candidateNum1;i++){
                String s = candidateList.get(i);
                nums = GetVoteResult(s);
                System.out.println(s+":"+nums);
            }
            //System.out.println("Invalid"+":"+voteList.get(candidateList.indexOf("Invalid")));
            Clear();
        }
    }
}
